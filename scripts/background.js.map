{"version":3,"names":[],"mappings":"","sources":["scripts/background.js"],"sourcesContent":["'use strict';\n\nfunction isEmpty(value) {\n    return value === undefined || value === null || value.trim() === '';\n}\n\nvar requestOrigins = {};\n\nfunction getOriginOverride() {\n    var requestOrigin = localStorage.getItem('requestOrigin') || '';\n    return requestOrigin;\n}\n\nfunction handleRequestHeaders(details) {\n\n    var header;\n    requestOrigins[details.requestId] = undefined;\n\n    if (!details.url.startsWith('http://') && !details.url.startsWith('https://') || details.url.indexOf('moesif.com') != -1 || details.url.indexOf('apirequest.io') != -1) {\n        return { requestHeaders: details.requestHeaders };\n    }\n\n    var url = new URL(details.url);\n\n    for (var i = 0; i < details.requestHeaders.length; ++i) {\n        header = details.requestHeaders[i];\n\n        if (header.name.toLowerCase() === 'origin') {\n\n            var originOverride = getOriginOverride(); // or get from localStorage from options.\n\n            if (!isEmpty(originOverride)) {\n                //add not empty also.\n                header.value = originOverride.trim();\n            }\n            requestOrigins[details.requestId] = header.value;\n        }\n    }\n\n    return { requestHeaders: details.requestHeaders,\n        redirectUrl: details.url };\n}\n\nfunction handleResponseHeaders(details) {\n\n    if (details.url.indexOf('moesif.com') != -1 || details.url.indexOf('apirequest.io') != -1) {\n        return { responseHeaders: details.responseHeaders };\n    }\n\n    var header = null,\n        requestOrigin = requestOrigins[details.requestId] || '',\n        allowOrigin = localStorage.getItem('allowOrigin') || '*',\n        allowHeaders = localStorage.getItem('allowHeaders') || '*',\n        allowMethods = localStorage.getItem('allowMethods') || '*',\n        allowCredentials = localStorage.getItem('allowCredentials') || 'false',\n        oldAllowHeaders = '',\n        responseHeaderNames = '',\n        allowOriginFound = false,\n        allowCredentialsFound = false,\n        allowMethodsFound = false,\n        allowHeadersFound = false;\n\n    delete requestOrigins[details.requestId];\n\n    for (var i = 0, len = details.responseHeaders.length; i < len; ++i) {\n        header = details.responseHeaders[i];\n        if (header.name.toLowerCase() === 'access-control-allow-credentials') {\n            allowCredentialsFound = header.value.toLowerCase() === 'true';\n        }\n        if (header.name.toLowerCase() === 'access-control-allow-headers') {\n            oldAllowHeaders = header.value;\n        }\n    }\n\n    if (allowCredentials) {\n        for (var i = 0, len = details.responseHeaders.length; i < len; ++i) {\n            header = details.responseHeaders[i];\n            responseHeaderNames += ',' + header.name;\n        }\n    }\n\n    responseHeaderNames = (oldAllowHeaders.replace(/(^,)|(,$)/g, '') + ',' + responseHeaderNames.replace(/(^,)|(,$)/g, '')).replace(/(^,)|(,$)/g, '');\n\n    for (i = 0, len = details.responseHeaders.length; i < len; ++i) {\n        header = details.responseHeaders[i];\n        if (header.name.toLowerCase() === 'access-control-allow-origin') {\n            header.value = allowOrigin === '*' && allowCredentials === 'true' ? requestOrigin : allowOrigin;\n            allowOriginFound = true;\n        } else if (header.name.toLowerCase() === 'access-control-allow-headers') {\n            header.value = allowHeaders === '*' ? responseHeaderNames : allowHeaders;\n            allowHeadersFound = true;\n        } else if (header.name.toLowerCase() === 'access-control-allow-methods') {\n            header.value = allowMethods === '*' ? 'GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH' : allowMethods;\n            allowMethodsFound = true;\n        } else if (header.name.toLowerCase() === 'access-control-allow-credentials') {\n            header.value = allowCredentials;\n            allowCredentialsFound = true;\n        }\n    }\n\n    if (!allowOriginFound) {\n        details.responseHeaders.push({\n            name: 'Access-Control-Allow-Origin',\n            value: allowOrigin === '*' && allowCredentials === 'true' ? requestOrigin : allowOrigin\n        });\n    }\n    if (!allowHeadersFound) {\n        details.responseHeaders.push({\n            name: 'Access-Control-Allow-Headers',\n            value: allowHeaders === '*' ? responseHeaderNames : allowHeaders\n        });\n    }\n    if (!allowMethodsFound) {\n        details.responseHeaders.push({\n            name: 'Access-Control-Allow-Methods',\n            value: allowMethods === '*' ? 'GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH' : allowMethods\n        });\n    }\n    if (!allowCredentialsFound) {\n        details.responseHeaders.push({\n            name: 'Access-Control-Allow-Credentials',\n            value: allowCredentials\n        });\n    }\n\n    return { responseHeaders: details.responseHeaders };\n}\n\nfunction setOn() {\n    chrome.browserAction.setBadgeText({ text: 'on' });\n    chrome.browserAction.setBadgeBackgroundColor({ color: [0, 0, 0, 0] });\n    chrome.webRequest.onBeforeSendHeaders.addListener(handleRequestHeaders, { urls: ['<all_urls>'], types: ['xmlhttprequest'] }, ['blocking', 'requestHeaders']);\n    chrome.webRequest.onHeadersReceived.addListener(handleResponseHeaders, { urls: ['<all_urls>'], types: ['xmlhttprequest'] }, ['blocking', 'responseHeaders']);\n}\nfunction setOff() {\n    chrome.browserAction.setBadgeText({ text: 'off' });\n    chrome.browserAction.setBadgeBackgroundColor({ color: [128, 128, 128, 200] });\n    chrome.webRequest.onBeforeSendHeaders.removeListener(handleRequestHeaders);\n    chrome.webRequest.onHeadersReceived.removeListener(handleResponseHeaders);\n}\n\nif (localStorage.getItem('on')) {\n    setOn();\n} else {\n    setOff();\n}\n\n// chrome.browserAction.onClicked.addListener(function () {\n//     if (localStorage.getItem('on')) {\n//         localStorage.setItem('on', '');\n//         setOff();\n//     } else {\n//         localStorage.setItem('on', '1');\n//         setOn();\n//     }\n// });\n\nchrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n    if (request.msg === 'setOn') {\n        setOn();\n    }\n    if (request.msg === 'setOff') {\n        setOff();\n    }\n});\n\n// chrome.runtime.onInstalled.addListener(details => {\n//  console.log('previousVersion', details.previousVersion);\n// });"],"file":"scripts/background.js","sourceRoot":"/source/"}